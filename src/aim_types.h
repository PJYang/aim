/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef aim_TYPES_H
#define aim_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _Datastore__isset {
  _Datastore__isset() : device(false), path(false), type(false), totalSize(false), usableSize(false) {}
  bool device;
  bool path;
  bool type;
  bool totalSize;
  bool usableSize;
} _Datastore__isset;

class Datastore {
 public:

  static const char* ascii_fingerprint; // = "E2396C406CD75CE894E195C727905C26";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x39,0x6C,0x40,0x6C,0xD7,0x5C,0xE8,0x94,0xE1,0x95,0xC7,0x27,0x90,0x5C,0x26};

  Datastore() : device(), path(), type(), totalSize(0), usableSize(0) {
  }

  virtual ~Datastore() throw() {}

  std::string device;
  std::string path;
  std::string type;
  int64_t totalSize;
  int64_t usableSize;

  _Datastore__isset __isset;

  void __set_device(const std::string& val) {
    device = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_totalSize(const int64_t val) {
    totalSize = val;
  }

  void __set_usableSize(const int64_t val) {
    usableSize = val;
  }

  bool operator == (const Datastore & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(totalSize == rhs.totalSize))
      return false;
    if (!(usableSize == rhs.usableSize))
      return false;
    return true;
  }
  bool operator != (const Datastore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Datastore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Datastore &a, Datastore &b);

typedef struct _NetInterface__isset {
  _NetInterface__isset() : name(false), address(false), physicalAddress(false) {}
  bool name;
  bool address;
  bool physicalAddress;
} _NetInterface__isset;

class NetInterface {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  NetInterface() : name(), address(), physicalAddress() {
  }

  virtual ~NetInterface() throw() {}

  std::string name;
  std::string address;
  std::string physicalAddress;

  _NetInterface__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_physicalAddress(const std::string& val) {
    physicalAddress = val;
  }

  bool operator == (const NetInterface & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(physicalAddress == rhs.physicalAddress))
      return false;
    return true;
  }
  bool operator != (const NetInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetInterface &a, NetInterface &b);

typedef struct _NodeInfo__isset {
  _NodeInfo__isset() : cores(false), sockets(false), memory(false) {}
  bool cores;
  bool sockets;
  bool memory;
} _NodeInfo__isset;

class NodeInfo {
 public:

  static const char* ascii_fingerprint; // = "AA65D1E80A832794F68DFF3C92410597";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x65,0xD1,0xE8,0x0A,0x83,0x27,0x94,0xF6,0x8D,0xFF,0x3C,0x92,0x41,0x05,0x97};

  NodeInfo() : cores(0), sockets(0), memory(0) {
  }

  virtual ~NodeInfo() throw() {}

  int32_t cores;
  int32_t sockets;
  double memory;

  _NodeInfo__isset __isset;

  void __set_cores(const int32_t val) {
    cores = val;
  }

  void __set_sockets(const int32_t val) {
    sockets = val;
  }

  void __set_memory(const double val) {
    memory = val;
  }

  bool operator == (const NodeInfo & rhs) const
  {
    if (!(cores == rhs.cores))
      return false;
    if (!(sockets == rhs.sockets))
      return false;
    if (!(memory == rhs.memory))
      return false;
    return true;
  }
  bool operator != (const NodeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeInfo &a, NodeInfo &b);

typedef struct _DomainInfo__isset {
  _DomainInfo__isset() : name(false), uuid(false), state(false), numberVirtCpu(false), memory(false) {}
  bool name;
  bool uuid;
  bool state;
  bool numberVirtCpu;
  bool memory;
} _DomainInfo__isset;

class DomainInfo {
 public:

  static const char* ascii_fingerprint; // = "2D1CAF98212361A62ECDC1469A8C2B0F";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0x1C,0xAF,0x98,0x21,0x23,0x61,0xA6,0x2E,0xCD,0xC1,0x46,0x9A,0x8C,0x2B,0x0F};

  DomainInfo() : name(), uuid(), state(), numberVirtCpu(0), memory(0) {
  }

  virtual ~DomainInfo() throw() {}

  std::string name;
  std::string uuid;
  std::string state;
  int32_t numberVirtCpu;
  double memory;

  _DomainInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  void __set_state(const std::string& val) {
    state = val;
  }

  void __set_numberVirtCpu(const int32_t val) {
    numberVirtCpu = val;
  }

  void __set_memory(const double val) {
    memory = val;
  }

  bool operator == (const DomainInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(numberVirtCpu == rhs.numberVirtCpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    return true;
  }
  bool operator != (const DomainInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DomainInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DomainInfo &a, DomainInfo &b);

typedef struct _RimpException__isset {
  _RimpException__isset() : description(false) {}
  bool description;
} _RimpException__isset;

class RimpException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RimpException() : description() {
  }

  virtual ~RimpException() throw() {}

  std::string description;

  _RimpException__isset __isset;

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const RimpException & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const RimpException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RimpException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RimpException &a, RimpException &b);

typedef struct _VLanException__isset {
  _VLanException__isset() : description(false) {}
  bool description;
} _VLanException__isset;

class VLanException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VLanException() : description() {
  }

  virtual ~VLanException() throw() {}

  std::string description;

  _VLanException__isset __isset;

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const VLanException & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const VLanException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VLanException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VLanException &a, VLanException &b);

typedef struct _StorageException__isset {
  _StorageException__isset() : description(false) {}
  bool description;
} _StorageException__isset;

class StorageException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  StorageException() : description() {
  }

  virtual ~StorageException() throw() {}

  std::string description;

  _StorageException__isset __isset;

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const StorageException & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const StorageException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageException &a, StorageException &b);

typedef struct _LibvirtException__isset {
  _LibvirtException__isset() : description(false) {}
  bool description;
} _LibvirtException__isset;

class LibvirtException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  LibvirtException() : description() {
  }

  virtual ~LibvirtException() throw() {}

  std::string description;

  _LibvirtException__isset __isset;

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const LibvirtException & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const LibvirtException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LibvirtException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LibvirtException &a, LibvirtException &b);



#endif
