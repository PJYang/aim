// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Aim.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AimHandler : virtual public AimIf {
 public:
  AimHandler() {
    // Your initialization goes here
  }

  /**
   * Rimp procedures
   */
  void checkRimpConfiguration() {
    // Your implementation goes here
    printf("checkRimpConfiguration\n");
  }

  int64_t getDiskFileSize(const std::string& virtualImageDatastorePath) {
    // Your implementation goes here
    printf("getDiskFileSize\n");
  }

  void getDatastores(std::vector<Datastore> & _return) {
    // Your implementation goes here
    printf("getDatastores\n");
  }

  void getNetInterfaces(std::vector<NetInterface> & _return) {
    // Your implementation goes here
    printf("getNetInterfaces\n");
  }

  void copyFromRepositoryToDatastore(const std::string& virtualImageRepositoryPath, const std::string& datastorePath, const std::string& virtualMachineUUID) {
    // Your implementation goes here
    printf("copyFromRepositoryToDatastore\n");
  }

  void deleteVirtualImageFromDatastore(const std::string& datastorePath, const std::string& virtualMachineUUID) {
    // Your implementation goes here
    printf("deleteVirtualImageFromDatastore\n");
  }

  void copyFromDatastoreToRepository(const std::string& virtualMachineUUID, const std::string& snapshot, const std::string& destinationRepositoryPath, const std::string& sourceDatastorePath) {
    // Your implementation goes here
    printf("copyFromDatastoreToRepository\n");
  }

  void instanceDisk(const std::string& source, const std::string& destination) {
    // Your implementation goes here
    printf("instanceDisk\n");
  }

  void renameDisk(const std::string& oldPath, const std::string& newPath) {
    // Your implementation goes here
    printf("renameDisk\n");
  }

  /**
   * VLan procedures
   * 
   * @param vlanTag
   * @param vlanInterface
   * @param bridgeInterface
   */
  void createVLAN(const int32_t vlanTag, const std::string& vlanInterface, const std::string& bridgeInterface) {
    // Your implementation goes here
    printf("createVLAN\n");
  }

  void deleteVLAN(const int32_t vlanTag, const std::string& vlanInterface, const std::string& bridgeInterface) {
    // Your implementation goes here
    printf("deleteVLAN\n");
  }

  void checkVLANConfiguration() {
    // Your implementation goes here
    printf("checkVLANConfiguration\n");
  }

  /**
   * Storage configuration procedures
   */
  void getInitiatorIQN(std::string& _return) {
    // Your implementation goes here
    printf("getInitiatorIQN\n");
  }

  void rescanISCSI(const std::vector<std::string> & targets) {
    // Your implementation goes here
    printf("rescanISCSI\n");
  }

  /**
   * Libvirt procedures
   */
  void getNodeInfo(NodeInfo& _return) {
    // Your implementation goes here
    printf("getNodeInfo\n");
  }

  void defineDomain(const std::string& xmlDesc) {
    // Your implementation goes here
    printf("defineDomain\n");
  }

  void undefineDomain(const std::string& domainName) {
    // Your implementation goes here
    printf("undefineDomain\n");
  }

  bool existDomain(const std::string& domainName) {
    // Your implementation goes here
    printf("existDomain\n");
  }

  DomainState::type getDomainState(const std::string& domainName) {
    // Your implementation goes here
    printf("getDomainState\n");
  }

  void getDomainInfo(DomainInfo& _return, const std::string& domainName) {
    // Your implementation goes here
    printf("getDomainInfo\n");
  }

  void getDomains(std::vector<DomainInfo> & _return) {
    // Your implementation goes here
    printf("getDomains\n");
  }

  void powerOn(const std::string& domainName) {
    // Your implementation goes here
    printf("powerOn\n");
  }

  void powerOff(const std::string& domainName) {
    // Your implementation goes here
    printf("powerOff\n");
  }

  void shutdown(const std::string& domainName) {
    // Your implementation goes here
    printf("shutdown\n");
  }

  void reset(const std::string& domainName) {
    // Your implementation goes here
    printf("reset\n");
  }

  void pause(const std::string& domainName) {
    // Your implementation goes here
    printf("pause\n");
  }

  void resume(const std::string& domainName) {
    // Your implementation goes here
    printf("resume\n");
  }

  void createISCSIStoragePool(const std::string& name, const std::string& host, const std::string& iqn, const std::string& targetPath) {
    // Your implementation goes here
    printf("createISCSIStoragePool\n");
  }

  void createNFSStoragePool(const std::string& name, const std::string& host, const std::string& dir, const std::string& targetPath) {
    // Your implementation goes here
    printf("createNFSStoragePool\n");
  }

  void createDirStoragePool(const std::string& name, const std::string& targetPath) {
    // Your implementation goes here
    printf("createDirStoragePool\n");
  }

  void createDisk(const std::string& poolName, const std::string& name, const double capacityInKb, const double allocationInKb, const std::string& format) {
    // Your implementation goes here
    printf("createDisk\n");
  }

  void deleteDisk(const std::string& poolName, const std::string& name) {
    // Your implementation goes here
    printf("deleteDisk\n");
  }

  void resizeVol(const std::string& poolName, const std::string& name, const double capacityInKb) {
    // Your implementation goes here
    printf("resizeVol\n");
  }

  void resizeDisk(const std::string& domainName, const std::string& diskPath, const double diskSizeInKb) {
    // Your implementation goes here
    printf("resizeDisk\n");
  }

  void getDomainBlockInfo(DomainBlockInfo& _return, const std::string& domainName, const std::string& diskPath) {
    // Your implementation goes here
    printf("getDomainBlockInfo\n");
  }

  void getDatapoints(std::vector<Measure> & _return, const std::string& domainName, const int32_t timestamp) {
    // Your implementation goes here
    printf("getDatapoints\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AimHandler> handler(new AimHandler());
  shared_ptr<TProcessor> processor(new AimProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

